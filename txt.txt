
{
        $lookup:{
          from:"users",
          localField:"likedVideos.owner",
          foreignField:"_id",
         as:"owner"
        }

      },

you can write code like this
1]
const getLikedVideos = asyncHandler(async (req, res) => {
  const userId = req.user._id;
 

  try {
    
    const likedVideos = await Like.aggregate([
      {
        $match:{
          likeBy:new mongoose.Types.ObjectId(userId)
        }
      },
      {
        $lookup:{
          from:"videos",
          localField:"video",
          foreignField:"_id",
          as:"likedVideos"
        }
      },
      {
        $unwind:"$likedVideos"
      },
      {
        $lookup: {
          from: "users",
          let: { owner_id: "$likedVideos.owner" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $eq: ["$_id", "$$owner_id"],
                },
              },
            },
            {
              $project: {
                avatar: 1,
                userName: 1,
                fullName: 1,
                _id: 0,
              },
            },
          ],
          as: "owner",
        },
      },
      {
        $unwind:{
          path:"$owner",
        }
      },
      {
        $project: {
          _id: "$likedVideos._id",
          title: "$likedVideos.title",
          thumbnail: "$likedVideos.thumbnail",
          duration: "$likedVideos.duration",
          createdAt: "$likedVideos.createdAt",
          views: "$likedVideos.views",
          owner: {
            userName: "$owner.userName",
            avatar: "$owner.avatar",
            fullName: "$owner.fullName",
          },
        },
      },
      {
        $group: {
          _id: null,
          likedVideos: {
            $push: "$$ROOT",
          },
        },
      },
      {
        $project: {
          _id: 0,
          likedVideos: 1,
        },
      },
    ])

    return res
    .status(200)
    .json(
      new ApiResponse(200,likedVideos,"All Liked Video fetche successfully")
    )

  } catch (error) {
    throw new ApiError(501,"internal server error while fetching liked videos")
  }


  
})

const getLikedVideos = asyncHandler(async (req, res) => {
  const userId = req.user._id;
 

  try {
    
    const likedVideos = await Like.aggregate([
      {
        $match:{
          likeBy:new mongoose.Types.ObjectId(userId)
        }
      },
      {
        $lookup:{
          from:"videos",
          localField:"video",
          foreignField:"_id",
          as:"likedVideos"
        }
      },
      {
        $unwind:"$likedVideos"
      },
     {
        $lookup:{
          from:"users",
          localField:"likedVideos.owner",
          foreignField:"_id",
         as:"owner"
        }

      },
      {
        $unwind:{
          path:"$owner",
        }
      },
      {
        $project: {
          _id: "$likedVideos._id",
          title: "$likedVideos.title",
          thumbnail: "$likedVideos.thumbnail",
          duration: "$likedVideos.duration",
          createdAt: "$likedVideos.createdAt",
          views: "$likedVideos.views",
          owner: {
            userName: "$owner.userName",
            avatar: "$owner.avatar",
            fullName: "$owner.fullName",
          },
        },
      },
      {
        $group: {
          _id: null,
          likedVideos: {
            $push: "$$ROOT",
          },
        },
      },
      {
        $project: {
          _id: 0,
          likedVideos: 1,
        },
      },
    ])

    return res
    .status(200)
    .json(
      new ApiResponse(200,likedVideos,"All Liked Video fetche successfully")
    )

  } catch (error) {
    throw new ApiError(501,"internal server error while fetching liked videos")
  }


  
})


2]
const getLikedVideos = asyncHandler(async (req, res) => {
  const userId = req.user._id;
 

  try {
    
    const likedVideos = await Like.aggregate([
      {
        $match:{
          likeBy:new mongoose.Types.ObjectId(userId)
        }
      },
      {
        $lookup:{
          from:"videos",
          localField:"video",
          foreignField:"_id",
          as:"likedVideos"
        }
      },
      {
        $unwind:"$likedVideos"
      },
      {
        $lookup: {
          from: "users",
          let: { owner_id: "$likedVideos.owner" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $eq: ["$_id", "$$owner_id"],
                },
              },
            },
            {
              $project: {
                avatar: 1,
                userName: 1,
                fullName: 1,
                _id: 0,
              },
            },
          ],
          as: "owner",
        },
      },
      {
        $unwind:{
          path:"$owner",
        }
      },
      {
        $project: {
          _id: "$likedVideos._id",
          title: "$likedVideos.title",
          thumbnail: "$likedVideos.thumbnail",
          duration: "$likedVideos.duration",
          createdAt: "$likedVideos.createdAt",
          views: "$likedVideos.views",
          owner: {
            userName: "$owner.userName",
            avatar: "$owner.avatar",
            fullName: "$owner.fullName",
          },
        },
      },
      {
        $group: {
          _id: null,
          likedVideos: {
            $push: "$$ROOT",
          },
        },
      },
      {
        $project: {
          _id: 0,
          likedVideos: 1,
        },
      },
    ])

    return res
    .status(200)
    .json(
      new ApiResponse(200,likedVideos,"All Liked Video fetche successfully")
    )

  } catch (error) {
    throw new ApiError(501,"internal server error while fetching liked videos")
  }


  
})